%{
// --------------------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2018 Jens Kallup
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// # <mode>    = asm, pascal
// # <srcfile> = Fortran source file
//
// # console input:
// $ forth2asm --mode <mode> <srcfile>
// --------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <ctype.h>
#include <limits.h>
#include <unistd.h>
#include <getopt.h>
#include <sys/types.h>

#include "common.h"

#define YYDEBUG 1
#define YYTYPE yylval

//-- FUNCTION DEFINITIONS ---------------------------------

extern int yyparse();
extern int yylex();

extern int yyerror(const char*);

#include "forth.tab.hpp"
#undef yywrap

int yyerror(const char *p) {
    std::cerr << "error:" << yyget_lineno() << ":" << p << std::endl;
    return yyget_lineno();
}

int yywrap() { return 1; }

%}

%option noyywrap
%option caseless

DIGIT       [0-9]
num         {DIGIT}+
ws          [ \t\n\r]
REMS1       ^[c|C].*\n
gotoline    ^[0-9]+
ident       [a-zA-Z]+[a-zA-Z0-9_]*

dimsid0     {ws}*{ident}{ws}*"("
dimsid1     {ws}*{ident}{ws}*
dimsid2     {ws}*","{ws}*

dimsidA     {dimsid0}{dimsid1}")"
dimsidB     {dimsid0}({dimsid1}{dimsid2}{dimsid1})*{ws}*")"

listsep     (({dimsid1})([,]{dimsid1})*)

%x subser subser_parameter dimens ident_or_num integers reals doubles complexes
%x precisions characters logicals complexs programs gotos
%%

^\!.*\n     { yytext[ext::strlen(yytext)-2] = '\0'; std::cout << ext::yypadding(yytext) << std::endl; }
^\*.*\n     { yytext[ext::strlen(yytext)-2] = '\0'; std::cout << ext::yypadding(yytext) << std::endl; }
^[c|C].*\n  { yytext[ext::strlen(yytext)-2] = '\0'; std::cout << ext::yypadding(yytext) << std::endl; }

{ws}*       { }
\n*         { ++yylineno; }
({ident}){ws}*"\="{ws}* {
    if (ext::current_flag == ext::ForthFlags::FLAG_NULL) {
    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::string st = yytext;
        ext::replaceStr(st,
        std::string("="),
        std::string(":="));
        std::cout << st;
    }   }
    //std::cout << "1: " << ":" << yytext << std::endl;
    BEGIN(ident_or_num);
}

<ident_or_num>{ident} {
    //std::cout << "3: " << yytext << std::endl;
    ext::forth_namespace ns;
    bool found = false;
    int  index = 0;

    // todo
    if (ext::convert_mode == ext::CVT_ASM) {
        ns = ext::forth_memory.back();
        for (auto &pa: ns.id_parameter) { pa.id_index = index++; }
        for (auto &pa: ns.id_parameter) {
            if (strstr(pa.id.c_str(),yytext)) {
                found = true;
            }
            ++index;
        }
        if (found == false) {
            char buffer[200];
            sprintf(buffer,"parameter/variable: '%s' not found.",yytext);
            yyerror(buffer);
            exit(1);
        }
    }

    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout << "\t" << yytext << ";";
    }   else
    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout <<
        "\tmov\teax, dword ptr [ebp + " << (ext::tmp_parameter * sizeof(uint32_t)) <<  // 1. var im head
        "]" << std::endl <<
        "\tmov\tdword ptr [ebp - " << (ext::tmp_parameter * sizeof(uint32_t)) <<  // 1. var im block
        "], eax" << std::endl << ";" << std::endl;
    }
    BEGIN(INITIAL);
}
<ident_or_num>{num} {
//    std::cout << "2: " << yytext << std::endl;

    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout << "\t" << yytext << ";" << std::endl;
    }   else
    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout <<
        "\tmov\tdword ptr [ebp - " << (ext::tmp_parameter++ * sizeof(uint32_t)) <<
        "], " << yytext << std::endl << ";" << std::endl;
    }
    BEGIN(INITIAL);
}

{gotoline}  {
    std::stringstream ss;

    if (ext::convert_mode == ext::CVT_ASM) {
    ss  << std::string("L")
        << std::string(yytext)
        << std::string(":\n");
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
    ss  << std::string("Label")
        << std::string(yytext)
        << std::string(":\n");
    }
    std::cout << ss.str();
}

([l|L][o|O][g|G][i|I][c|C][a|A][l|L])                { BEGIN(logicals);   }
([i|I][n|N][t|T][e|E][g|G][e|E][r|R])                { BEGIN(integers);   }
([r|R][e|E][a|A][l|L])                               { BEGIN(reals);      }
([d|D][o|O][u|U][b|B][l|L][e|E])                     { BEGIN(doubles);    }
([c|C][o|O][m|M][p|P][l|L][e|E][x|X])                { BEGIN(complexs);   }
([c|C][a|A][r|R][a|A][c|C][t|T][e|E][r|R])           { BEGIN(characters); }
([d|D][i|I][m|M][e|E][n|n][s|S][i|I][o|O][n|N])      { BEGIN(dimens);     }
([s|S][u|U][b|B][r|R][o|O][u|U][t|T][i|I][n|N][e|E]) { BEGIN(subser);     }
([p|P][r|R][o|O][g|G][r|R][a|A][m|M])                { BEGIN(programs);   }
([g|G][o|O][t|T][o|O])                               { BEGIN(gotos);      }


<logicals>{listsep} {
    std::cout << std::string(yytext);
    BEGIN(INITIAL);
}
<integers>{listsep} {
    std::string st = std::string(yytext);
    ext::removeCharsFromString(st,(char*)"\n\t");

    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout << "var " << st << ";" << std::endl;
    }
    BEGIN(INITIAL);
}
<integers>\n ++yylineno;

<reals>{listsep} {
    std::cout << std::string(yytext);
    BEGIN(INITIAL);
}
<doubles>{ws}*([p|P][r|E][c|C][i|I][s|S][i|I][o|O][n|N]){ws}* {
    std::cout << std::string(yytext);
    BEGIN(precisions);
}
<precisions>{listsep} {
    std::cout << std::string(yytext);
    BEGIN(INITIAL);
}
<characters>{listsep} {
    std::cout << std::string(yytext);
    BEGIN(INITIAL);
}

<gotos>{ws}*({num}) {
    std::string st = std::string(yytext);
    ext::removeCharsFromString(st,(char*)"goto ");

    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout <<
        std::string("\tjmp\tL") <<
        std::string(st)         <<
        std::string("\n");
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout << "\n\tgoto Label" << st << ";" <<
        std::endl;
    }

    BEGIN(INITIAL);
}

<programs>{ws}*{ident} {
    std::string st = std::string(yytext);

    std::cout << ext::yypadding(yytext);
    ext::current_flag == ext::ForthFlags::FLAG_PROGRAM;

    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout
        << "\nBITS 32"          << std::endl
        << "main:"              << std::endl
        << "\tpush\tebp"        << std::endl
        << "\tmov\tebp, esp"    << std::endl
        << "\tsub\tesp, 16"     << std::endl
        << ";"                  << std::endl;
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout                  << std::endl
        << "program " << st << ";\n";
    }
    BEGIN(INITIAL);
}
([e|E][n|N][d|D]) {
    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout << "\tleave\n\tret\n\n";
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
    if (ext::current_flag == ext::ForthFlags::FLAG_PROGRAM)
        std::cout << "end."; else
        std::cout << "end;";
        std::cout <<  std::endl;
    }
}

<dimens>(({dimsidA}|{dimsidB})|(({dimsidA}|{dimsidB}){ws}*","{ws}*({dimsidA}|{dimsidB}))) {
    std::cout << std::string("\ndimensA: ") << std::string(yytext);
    BEGIN(INITIAL);
}

<subser>{ws}*   { }
<subser>{ident} {
    // exists?
    bool found = false;
    for (auto &id : ext::forth_memory) {
        if (strstr(id.id.c_str(),yytext)) {
            found = true;
            break;
        }
    }
    if (found == false) {
        ext::forth_namespace ns;
        ns.id = std::string(yytext);
        ns.id_type = ext::ForthFlags::FLAG_SUBROUTINE;
        ext::forth_memory.push_back(ns);
    }

    std::stringstream ss;
    ss  << std::string("subroutine: ")
        << std::string(yytext);
    std::cout << ext::yypadding(ss.str());

    if (ext::convert_mode == ext::CVT_ASM) {
        std::cout << std::string(yytext) << ":" << std::endl;

        std::cout << "\tpush\tebp"     << std::endl;
        std::cout << "\tmov\tebp, esp" << std::endl;
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
        std::cout <<
        std::endl << "procedure " << yytext;
    }

    BEGIN(subser_parameter);
}
<subser>\n   { ++yylineno; }

<subser_parameter>{ws}*"("(({ws}*)|({ws}*{ident}{ws}*)|({ws}*{ident}{ws}*","{ws}*{ident}{ws}*)|(({ws}*{ident}",")*{ws}*{ident}{ws}*))")" {
    std::string st = std::string(yytext);
    ext::removeCharsFromString(st,(char*)"() ");

    std::vector<std::string> parameter;
    parameter = ext::split(st,',');

    ext::forth_namespace ns, ts;
    ns = ext::forth_memory.back();

    int plen = parameter.size() - 1;
    int ilen = ns.id_parameter.size();

    if (plen > 0) {
        for (int j = 0; j < plen; ++j) {
            if (ilen < 1) {
                ts.id = parameter[j];
                ts.id_type = ext::ForthFlags::FLAG_PARAMETER;
                ns.id_parameter.push_back(ts);
            }
            else if (strstr(ns.id_parameter[j].id.c_str(),parameter[j].c_str())) {
                // exists ...
                printf("121212\n");
            }
/*          else {
                ts.id = yytext;
                ts.id_type = ext::ForthFlags::FLAG_PARAMETER;
                ns.id_parameter.push_back(ts);
            }*/
        }
    }

    if (ext::convert_mode == ext::CVT_ASM) {
        ext::tmp_parameter = 1;

        std::cout << "\tsub\tesp, " << ((parameter.size() * sizeof(uint32_t)) + sizeof(uint32_t));
        std::cout << std::endl;

        for (auto &pav: parameter) {
            ext::tmp_parameter += 1;
            ext::tmp_string_stream << "\tmov\tdword ptr [ebp - " << (ext::tmp_parameter * sizeof(uint32_t));
            ext::tmp_string_stream << "], " << pav << "\n";
        }
    }   else
    if (ext::convert_mode == ext::CVT_PASCAL) {
        ext::tmp_string_stream.clear();
        if (parameter.size() < 1)
        std::cout << ";"; else
        std::cout << "(";
        int plen = parameter.size();
        for (int i = 0; i < plen; ++i) {
            ext::tmp_string_stream << parameter[i];
            if (i < plen)    {
            if (i == plen-1) {
            ext::tmp_string_stream << ");" << std::endl; break; }
            ext::tmp_string_stream << ","; }
        }
    }

    std::cout << ext::tmp_string_stream.str();
    BEGIN(INITIAL);
}
<subser_parameter>\n  { ++yylineno; }

.   {
    yyerror("unknow character.");
    exit(1);
}

<<EOF>>         { return 0; }
%%

//-- FUNCTION DEFINITIONS ---------------------------------
int main(int argc, char **argv)
{
    std::vector<std::string> forth_files;
    int opt, c;
    int idx;

    static const struct option long_options[] =
    {
        { "mode",    required_argument, 0, 400 },
        { "verbose", no_argument,       0, 402 },
        { "version", no_argument,       0, 404 },
        { "help",    no_argument,       0, 408 },
        { 0     ,    0          ,       0,  0  }
    };

    std::cerr << "forth2asm (c) 2019 Jens Kallup - non profit Software" << std::endl;
    std::cerr << "all rights reserved."    << std::endl                 << std::endl;

    if (argc < 2) {
        std::cout << "no parameter given." << std::endl;
        return 1;
    }

    while (1) {
        opt = optind ? optind : 1;
        idx = 0;
        if ((c = getopt_long(argc, argv, "abc:d", long_options, &idx)) < 0) {
            break;
        }
        switch (c) {
        case 0:
            printf("option %s", long_options[idx].name);
            if (optarg)
                printf(" with arg %s", optarg);
            printf("\n");
            break;

        case 400:
        {
            if (ext::strlen(optarg) == 7) {
                if (optarg[0] == 'p'
                &&  optarg[1] == 'a'
                &&  optarg[2] == 's'
                &&  optarg[3] == 'c'
                &&  optarg[4] == 'a'
                &&  optarg[5] == 'l') {
                ext::convert_mode = ext::CVT_PASCAL;
                } else {
                  std::cout << "unknow converter mode" << std::endl;
                  return 1;
            }   } else
            if (ext::strlen(optarg) == 4) {
                if (optarg[0] == 'a'
                &&  optarg[1] == 's'
                &&  optarg[2] == 'm') {
                ext::convert_mode = ext::CVT_ASM;
                } else {
                  std::cout << "unknow converter mode" << std::endl;
                  return 1;
            }   } else {
                  std::cout << "unknow converter mode" << std::endl;
                  return 1;
            }
            std::cout << "source file will be converted to: " << optarg << std::endl;
        }
        break;

        case 402:
            printf("option verbose\n");
            break;

        case 404:
            printf("version: 0.0.1 alpha\n");
            break;

        case 408:
            printf(
            "Fortran Transpiller - options:\n"
            " --mode     mode = asm, pascal\n");
            break;

        case '?':
            break;

        default:
            printf("?? getopt returned character code 0%o ??\n", c);
        }
    }

    if (optind < argc) {
        while (optind < argc) {
            if (!(ext::file_pile[optind++] = fopen(argv[optind-1],"r"))) {
                char buffer[200];
                sprintf(buffer,"can't open file: %s",argv[optind-1]);
                perror (buffer);
                return 1;
            }
            else {
                fclose(ext::file_pile[optind-1]);
                forth_files.push_back(argv[optind-1]);
            }
        }
    }
    else {
        std::cout << "no input file specified." << std::endl;
        return 1;
    }

    // !! todo
    std::string input_file ;
    std::string reput_file ;

    if (forth_files.size() > 0)
    input_file = forth_files[0];  else
    input_file = std::string("stdin");

    reput_file = input_file;

    if (ext::convert_mode == ext::CVT_PASCAL) reput_file.append(".pas"); else
    if (ext::convert_mode == ext::CVT_ASM   ) reput_file.append(".asm");

    FILE *fr = fopen(input_file.c_str(),"r"); if (!fr) return yyerror("can not open input file!");
    FILE *fw = fopen(reput_file.c_str(),"w"); if (!fw) return yyerror("can not open write file!");

    fseek(fr, 0, SEEK_END); ext::yyget_line_gap = ftell(fr);
    fseek(fr, 0, SEEK_SET);

    // get lines of "fr" ...
    int  _lineno = 1;
    char ch;
    do {
        ch = fgetc(fr);
        if (ch == '\n') ++_lineno;
    } while (ch != EOF);

    fseek(fr, 0, SEEK_SET);

    // for listing mode
    char buffer[] = "1234567890abcdefghijklmnopqrstuvwxyz";
    sprintf(buffer,"%d",ext::yyget_line_gap);
    ext::yymet_line_gap = ext::strlen(buffer);

    yyset_in (fr);
    yyset_out(fw);
    yyset_lineno(0);

    ext::forth_namespace init_forth;
    init_forth.id = std::string("root");
    ext::forth_memory.push_back(init_forth );

    int result = yyparse();

    std::cout << "compiled lines: " << _lineno << std::endl;
    std::cout << "done." <<
    std::endl;

    fclose(fw);
    return result;
}

